package Controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.control.Button;

import javafx.scene.layout.HBox;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import org.controlsfx.control.Notifications;

import Dao.ProcessosDao;
import Dao.TipoProcDao;
import Modelo.Administrador;
import Modelo.Processo;
import Modelo.TipoProcesso;
import application.Main;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;

import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.util.Duration;
import javafx.scene.control.TableColumn;

public class TelaProcessoController implements Initializable {
	@FXML
	private Pane paneProcesso;
	@FXML
	private AnchorPane ApaneTabela;
	@FXML
	private Button btnIndeferir;
	@FXML
	private Button btnDeferir;
	@FXML
	private TableView<Processo> tblProcessosView;
	@FXML
	private TableColumn<Processo,Integer> colunProtoc;
	@FXML
	private TableColumn<Processo,String> colunNomeProc;
	@FXML
	private TableColumn<Processo,String> colunAluno;
	@FXML
	private TableColumn<Processo,String> colunComent;
	@FXML
	private TextArea txtComent;
	@FXML
	private Button btnCancel;
	@FXML
	private Button btnEnviar;

	static Processo proc = new Processo();
	ObservableList<Processo> proView ;
	ProcessosDao proDao = new ProcessosDao();
	TipoProcDao tipoDao = new TipoProcDao();
	TipoProcesso tipoProc = new TipoProcesso();
	Administrador adm = new Administrador();
	String resposta;
	Main main = null;


	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		populaViewProc();
		resposta = "";
		btnDeferir.setDisable(false);
		btnDeferir.setDisable(false);
	}

	public void pegaProc(Processo pro){
		this.proc =pro;
	}
	@FXML
	public void populaViewProc(){

		colunProtoc.setCellValueFactory(new PropertyValueFactory<Processo, Integer>("id"));
		colunNomeProc.setCellValueFactory(new PropertyValueFactory<Processo, String>("Nome"));
		colunAluno.setCellValueFactory(new PropertyValueFactory<Processo, String>("alunoNome"));
		colunComent.setCellValueFactory(new PropertyValueFactory<Processo, String>("comentarios"));
		proView = FXCollections.observableArrayList(proc);
		tblProcessosView.getItems().removeAll();
		tblProcessosView.setItems(proView);
	}
	// Event Listener on Button[#btnIndeferir].onAction
	@FXML
	public void indeferirProc(ActionEvent event) {
		resposta = "Indeferir";
		btnDeferir.setDisable(true);
	}
	// Event Listener on Button[#btnDeferir].onAction
	@FXML
	public void deferirProc(ActionEvent event) {
		resposta = "Deferir";
		btnIndeferir.setDisable(true);
	}
	// Event Listener on Button[#btnCancel].onAction
	@FXML
	public void cancelarProc(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnEnviar].onAction
	@FXML
	public void enviarProc(ActionEvent event) {
		Processo pro = buscarStatusAdmOn();
		String salvo = "Falha";
		if(resposta.equals("Indeferir")){

			proc.setStatus("Processo negado por : "+pro.getNomeAdm()+" - "+pro.getAdmDepart());
			if(!txtComent.getText().equals("")){
				proc.setComentarios(txtComent.getText());
			}
			proDao.alterarStatus(proc);	

		}else{
			if(resposta.equalsIgnoreCase("Deferir")){
				if(!txtComent.getText().equals("")){
					proc.setComentarios(txtComent.getText());
				}
				pro=buscarStatusAdmOn();
				pro.setStatusPend("off");
				salvo =proDao.alterarStatusOn(pro);
				pro=buscarStatusAdmNext();
				if(pro!=null){
				pro.setStatusPend("on");
				salvo = proDao.alterarStatusNext(pro);
				}
				pro=buscarStatusOff(pro);
				if(pro!=null){
					pro.setStatusPend("next");
					salvo=proDao.alterarStatusOff(pro);
				}
			}else{
				exibeMensagem("Selecione uma resposta");
			}
		}	
		if(salvo.equals("salvo")){
			exibeMensagem("Resposta envida com sucesso!");
		}
		resposta = "";
	}
	public Processo buscarStatusAdmOn(){
		Processo pro =  new Processo();
		List<Processo>listProc2 = new ArrayList<>();
		listProc2 = proDao.listarProcessos(proc);
		for(Processo proc : listProc2){
			if(proc.getStatusPend().equals("on")){
				return pro=proc;
			}
		}
		return pro;

	}
	public Processo buscarStatusAdmNext(){
		Processo pro =  new Processo();
		List<Processo>listProc2 = new ArrayList<>();
		listProc2 = proDao.listarProcessos(proc);
		for(Processo proc : listProc2){
			if(proc.getStatusPend().equals("next")){
				return pro=proc;
			}
		}
		return pro;
	}
	public Processo buscarStatusOff(Processo proce){
		Processo pro =  new Processo();
		List<Processo>listProc2 = new ArrayList<>();
		listProc2 = proDao.listarProcessos(proc);
		for(Processo proc : listProc2){
			if(proc.getCont()==proce.getCont()+1){
				return pro=proc;
			}
		}
		return pro;
	}
	
	public void buscarAdm(){
		List<Administrador> listAdm = new ArrayList<>();
		listAdm = tipoDao.listarAdmsTipo(tipoProc);

	}
	public void acharTipo(){
		List<TipoProcesso> listTipoProc = new ArrayList<>();
		listTipoProc = tipoDao.listarTipoProc();
		for(TipoProcesso tipoProc : listTipoProc){
			if(proc.getNome().equals(tipoProc.getNome())){
				this.tipoProc=tipoProc;
			}
		}	
	}
	public void exibeMensagem(String msg){


		Notifications.create()
		.text(String.valueOf(msg))
		.owner(main )
		.hideAfter(Duration.seconds(3))
		.darkStyle()
		.position(Pos.TOP_RIGHT)
		.showInformation();


	}
}
